import os
import random
import requests
import datetime
import webbrowser
import pyjokes
import pyttsx3
import speech_recognition as sr

class JarvisAssistant:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.engine = pyttsx3.init()
        self.api_key = os.getenv('ALPHA_VANTAGE_API_KEY')  # Ensure this environment variable is set

    def sptext(self):
        with sr.Microphone() as source:
            print("Listening...")
            self.recognizer.adjust_for_ambient_noise(source)
            try:
                audio = self.recognizer.listen(source, timeout=3)
                print("Recognizing...")
                data = self.recognizer.recognize_google(audio)
                print("You said:", data)
                return data.lower()
            except sr.WaitTimeoutError:
                print("Listening timed out. Please try again.")
            except sr.UnknownValueError:
                print("NOT UNDERSTOOD")
            except sr.RequestError:
                print("Could not request results; check your network connection.")
            return ""

    def speechtx(self, text):
        voices = self.engine.getProperty('voices')
        female_voice_found = False
        for voice in voices:
            if "female" in voice.name.lower() or "woman" in voice.name.lower():
                self.engine.setProperty('voice', voice.id)
                female_voice_found = True
                break
        if not female_voice_found and voices:
            self.engine.setProperty('voice', voices[0].id)
        self.engine.setProperty('rate', 125)
        self.engine.say(text)
        self.engine.runAndWait()

    def greet_user(self):
        current_hour = datetime.datetime.now().hour
        if current_hour < 12:
            return "Good morning!"
        elif 12 <= current_hour < 18:
            return "Good afternoon!"
        else:
            return "Good evening!"

    def get_motivational_quote(self):
        quotes = [
            "The best way to predict the future is to invent it.",
            "You miss 100% of the shots you don't take.",
            "Act as if what you do makes a difference. It does.",
            "NO PAIN NO GAIN.",
            "Silence is the best answer.",
            "Time Speaks."
        ]
        return random.choice(quotes)

    def spell_word(self, word):
        spelled_out = ' '.join(letter for letter in word)
        return f"The spelling of {word} is: {spelled_out}."

    def get_stock_price(self, symbol):
        url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={self.api_key}'
        try:
            response = requests.get(url)
            data = response.json()
            if 'Global Quote' in data and '05. price' in data['Global Quote']:
                price = data['Global Quote']['05. price']
                return f"The current stock price of {symbol} is ${price}."
            else:
                return "Could not retrieve stock data. Please check the symbol and try again."
        except Exception as e:
            return f"An error occurred: {str(e)}"

    def run(self):
        print("Say 'Hey Jarvis' to activate.")
        try:
            while True:
                command = self.sptext()
                if "jarvis" in command or "hello" in command or "hi" in command:
                    print("Activated: Hello Master")
                    greeting_response = self.greet_user()
                    self.speechtx(greeting_response)
                    self.speechtx(f"You said: {command}. How can I assist you?")

                    if "what is your name" in command:
                        self.speechtx("My name is Jarvis.")
                    elif "how old are you" in command:
                        self.speechtx("I am a digital assistant, I don't have an age.")
                    elif "what is the time" in command:
                        current_time = datetime.datetime.now().strftime("%I:%M %p")
                        self.speechtx(f"The current time is {current_time}.")
                    elif "motivation" in command or "quote" in command:
                        quote_response = self.get_motivational_quote()
                        self.speechtx(quote_response)
                    elif "spell" in command:
                        word = command.replace("spell", "").strip()
                        if word:
                            spelling_response = self.spell_word(word)
                            self.speechtx(spelling_response)
                        else:
                            self.speechtx("Please provide a word to spell.")
                    elif "open vesit" in command:
                        webbrowser.open("https://vesit.ves.ac.in/")
                        self.speechtx("Opening the website.")
                    elif "open screener" in command:
                        webbrowser.open("https://www.screener.in/")
                        self.speechtx("Opening the website.")
                    elif "youtube" in command:
                        webbrowser.open("https://www.youtube.com/")
                        self.speechtx("Opening YouTube.")
                    elif "joke" in command:
                        joke = pyjokes.get_joke(language="en", category="neutral")
                        self.speechtx(joke)
                    elif "current stock price" in command:
                        words = command.split()
                        if len(words) >= 4:
                            symbol = words[-1].upper()
                            stock_price_response = self.get_stock_price(symbol)
                            self.speechtx(stock_price_response)
                        else:
                            self.speechtx("Please provide a stock symbol after 'current stock price'.")
                    elif "exit" in command:
                        self.speechtx("Thank you. Goodbye!")
                        break
        except KeyboardInterrupt:
            self.speechtx("Exiting the program. Goodbye!")
        finally:
            print("Program terminated.")

if __name__ == '__main__':
    assistant = JarvisAssistant()
    assistant.run()
